<script>
  let particles: Particle[] = [];
  let lastParticleTime: number = 0; // track last time a particle was created
  const particleInterval: number = 100; // particle creation delay (ms)

  class Particle {
    x: number;
    y: number;
    size: number;
    speedX: number;
    speedY: number;
    opacity: number;

    constructor(x: number, y: number) {
      this.x = x;
      this.y = y;
      this.size = Math.random() * 6 + 4;
      this.speedX = Math.random() * 2 - 1; // horizontal movement
      this.speedY = Math.random() * -3; // vertical movement
      this.opacity = 1;
    }

    update() {
      this.x += this.speedX;
      this.y += this.speedY;
      this.opacity -= 0.02; // slowly fade out
      if (this.opacity < 0) this.opacity = 0;
    }

    draw(ctx: CanvasRenderingContext2D) {
      ctx.fillStyle = `rgba(215, 200, 176, ${this.opacity})`; // methane-like color ($accent-3)
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
      ctx.fill();
    }
  }

  function handleParticles(ctx: CanvasRenderingContext2D) {
    for (let i = 0; i < particles.length; i++) {
      particles[i].update();
      particles[i].draw(ctx);

      // Remove particle if fully faded
      if (particles[i].opacity <= 0) {
        particles.splice(i, 1);
        i--;
      }
    }
  }

  // Throttled mousemove event to create particles
  document.addEventListener('mousemove', (e: MouseEvent) => {
    const currentTime = Date.now();
    if (currentTime - lastParticleTime > particleInterval) {
      particles.push(new Particle(e.clientX, e.clientY));
      lastParticleTime = currentTime;
    }
  });

  // Set up canvas and animation loop
  let canvas: HTMLCanvasElement;
  let ctx: CanvasRenderingContext2D | null;

  function setupCanvas() {
    canvas = document.getElementById('particleCanvas') as HTMLCanvasElement;
    ctx = canvas.getContext('2d');
    resizeCanvas();

    // Animation loop
    function animate() {
      ctx!.clearRect(0, 0, canvas.width, canvas.height);
      handleParticles(ctx!);
      requestAnimationFrame(animate);
    }

    animate();
  }

  function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }

  window.addEventListener('resize', resizeCanvas);

  // Initialize canvas once DOM is fully loaded
  window.onload = () => {
    setupCanvas();
  };
</script>

<canvas id="particleCanvas"></canvas>

<style lang="scss">
  #particleCanvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none; // Ensure canvas doesn't interfere with interactions
    z-index: 50;
  }
</style>
